---
import HeadBase from "@astrojs/starlight/components/Head.astro";
import { detectEnvironment } from "../../../config/environment.js";
import { generateMetaTags } from "../../../config/seo.js";

// Define interfaces for better type safety
interface MetaTag {
  tag: string;
  attrs: {
    property?: string;
    name?: string;
    content?: string;
    [key: string]: string | undefined;
  };
  content?: string;
}

// Get page info from the props passed by Starlight
const page = Astro.props.entry;
const { head: originalHead = [] } = Astro.props;

// Get environment information
const env = detectEnvironment();
const siteUrl =
  env && typeof env === "object" && "siteUrl" in env
    ? (env.siteUrl as string)
    : "";

// Generate page-specific URL
let pageUrl = siteUrl;
if (page?.slug && page.slug !== "index") {
  pageUrl = `${siteUrl}/${page.slug}`;
}

console.log("Current site URL:", siteUrl);
console.log("Current page data:", page?.slug, page?.data?.title);
console.log("Generated page URL:", pageUrl);

// Generate page-specific meta tags
const pageTags = generateMetaTags({
  siteUrl,
  title: page?.data?.title || "Sign Tech Interview",
  description: page?.data?.description || "",
  imagePath: "/logo.png",
  pageUrl,
});

// Find which OG tags already exist in original head
const existingOgProperties = originalHead
  .filter((tag: MetaTag) => tag.attrs?.property?.startsWith("og:"))
  .map((tag: MetaTag) => tag.attrs.property);

const existingTwitterProperties = originalHead
  .filter((tag: MetaTag) => tag.attrs?.name?.startsWith("twitter:"))
  .map((tag: MetaTag) => tag.attrs.name);

console.log("Existing OG properties:", existingOgProperties);
console.log("Existing Twitter properties:", existingTwitterProperties);

// Filter out page tags that already exist
const newMetaTags = pageTags.filter((tag: MetaTag) => {
  if (tag.attrs?.property?.startsWith("og:")) {
    return !existingOgProperties.includes(tag.attrs.property);
  }
  if (tag.attrs?.name?.startsWith("twitter:")) {
    return !existingTwitterProperties.includes(tag.attrs.name);
  }
  return false;
});

// Create final head by combining original tags with new ones
const customHead = [...originalHead, ...newMetaTags];

// Check if we still need to add og:image and og:logo manually
const hasOgImage = customHead.some(
  (tag: MetaTag) => tag.attrs?.property === "og:image",
);
const hasOgLogo = customHead.some(
  (tag: MetaTag) => tag.attrs?.property === "og:logo",
);
---

<HeadBase head={customHead} />

<!-- Add critical OG tags only if missing -->
{!hasOgImage && <meta property="og:image" content={`${siteUrl}/logo.png`} />}
{!hasOgLogo && <meta property="og:logo" content={`${siteUrl}/logo.png`} />}
