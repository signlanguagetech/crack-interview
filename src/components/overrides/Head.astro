---
import HeadBase from "@astrojs/starlight/components/Head.astro";
import { detectEnvironment } from "../../../config/environment.js";

// Define interfaces for better type safety
interface MetaTag {
  tag: string;
  attrs: {
    property?: string;
    name?: string;
    content?: string;
    [key: string]: string | undefined;
  };
  content?: string;
}

// Get page info from the props passed by Starlight
const { head: originalHead = [], page } = Astro.props;

// Get environment information
const env = detectEnvironment();
const { siteUrl = "" } = env as { siteUrl: string };

// -------------------------------------------------------
// Define fallback values
// -------------------------------------------------------
const defaultTitle = "Sign Tech Interview";
const defaultDescription = "Your comprehensive guide to technical interviews in sign language technology and software development.";

// Get the current page title and description from the page data
const pageTitle = page?.data?.title || defaultTitle;
const pageDescription = page?.data?.description || defaultDescription;

// -------------------------------------------------------
// Add custom meta tags that don't exist in the original head
// -------------------------------------------------------
const customHead = [
  // Standard meta tags
  { tag: "meta", attrs: { name: "description", content: pageDescription } },
  
  // Open Graph
  { tag: "meta", attrs: { property: "og:title", content: pageTitle } },
  { tag: "meta", attrs: { property: "og:description", content: pageDescription } },
  { tag: "meta", attrs: { property: "og:image", content: `${siteUrl}/logo.png` } },
  { tag: "meta", attrs: { property: "og:logo", content: `${siteUrl}/logo.png` } },
  { tag: "meta", attrs: { property: "og:image:type", content: "image/png" } },
  { tag: "meta", attrs: { property: "og:image:alt", content: "Sign Tech Interview Logo" } },
  
  // Twitter Card
  { tag: "meta", attrs: { name: "twitter:card", content: "summary_large_image" } },
  { tag: "meta", attrs: { name: "twitter:site", content: "@SignLanguageTech" } },
  { tag: "meta", attrs: { name: "twitter:title", content: pageTitle } },
  { tag: "meta", attrs: { name: "twitter:description", content: pageDescription } },
  { tag: "meta", attrs: { name: "twitter:image", content: `${siteUrl}/logo.png` } },
  { tag: "meta", attrs: { name: "twitter:image:alt", content: "Sign Tech Interview Logo" } },
];

// Filter out custom tags that already exist in the originalHead
const existingProperties = new Set<string>();
const existingNames = new Set<string>();

originalHead.forEach((tag: MetaTag) => {
  if (tag.attrs?.property) existingProperties.add(tag.attrs.property);
  if (tag.attrs?.name) existingNames.add(tag.attrs.name);
});

const additionalHead = customHead.filter((tag: MetaTag) => {
  if (tag.attrs?.property) return !existingProperties.has(tag.attrs.property);
  if (tag.attrs?.name) return !existingNames.has(tag.attrs.name);
  return true;
});

// Combine original head with our additional tags
const mergedHead = [...originalHead, ...additionalHead];
---

<HeadBase head={mergedHead} />
