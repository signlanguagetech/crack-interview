---
import HeadBase from "@astrojs/starlight/components/Head.astro";
import { detectEnvironment } from "../../../config/environment.js";

// ---------------------------------------------------
// Interfaces
// ---------------------------------------------------
interface MetaTag {
  tag: string;
  attrs: {
    property?: string;
    name?: string;
    content?: string;
    [key: string]: string | undefined;
  };
  content?: string;
}

// ---------------------------------------------------
// Data Collection
// ---------------------------------------------------
// 1. Get data from Starlight
const { head: propsHead = [] } = Astro.props;
const starlightRoute = Astro.locals.starlightRoute || {};
const entryData = starlightRoute?.entry?.data || {};
const pagePath = starlightRoute?.pathname || starlightRoute?.entry?.slug || '';

// 2. Get environment information
const env = detectEnvironment();
const { siteUrl = "" } = env as { siteUrl: string };
const baseUrl = siteUrl || "https://interview.signlanguagetech.com";

// ---------------------------------------------------
// Build Metadata
// ---------------------------------------------------
// 1. Define defaults
const defaultTitle = "Sign Tech Interview";
const defaultDescription = "Comprehensive guide for technical interviews covering various programming languages and software development concepts.";

// 2. Get page metadata with fallbacks
const pageTitle = entryData?.title || defaultTitle;
const pageDescription = entryData?.description || defaultDescription;

// 3. Build image URLs
const logoUrl = new URL("/logo.png", baseUrl).toString();

// 4. Combine head arrays from all sources
const originalHead = [...propsHead, ...(entryData?.head || [])];

// 5. Check for existing tags
const hasMetaTag = (propOrName: string, isProperty = true) => 
  originalHead.some((tag: MetaTag) => 
    isProperty ? tag.attrs?.property === propOrName : tag.attrs?.name === propOrName
  );

const hasOgImage = hasMetaTag("og:image");
const hasOgLogo = hasMetaTag("og:logo");
const hasTwitterCard = hasMetaTag("twitter:card", false);
const hasTwitterSite = hasMetaTag("twitter:site", false);
const hasTwitterTitle = hasMetaTag("twitter:title", false);
const hasTwitterDescription = hasMetaTag("twitter:description", false);
const hasTwitterImage = hasMetaTag("twitter:image", false);

// 6. Create custom meta tags
const customHead = [
  // Standard meta tags
  { tag: "meta", attrs: { name: "description", content: pageDescription } },
  
  // Open Graph - Basic
  { tag: "meta", attrs: { property: "og:title", content: pageTitle } },
  { tag: "meta", attrs: { property: "og:description", content: pageDescription } },
  { tag: "meta", attrs: { property: "og:locale", content: starlightRoute?.locale || 'en' } },
  { tag: "meta", attrs: { property: "og:type", content: "website" } },
  
  // Open Graph - Image
  { tag: "meta", attrs: { property: "og:image", content: logoUrl } },
  { tag: "meta", attrs: { property: "og:image:secure_url", content: logoUrl } },
  { tag: "meta", attrs: { property: "og:image:type", content: "image/png" } },
  { tag: "meta", attrs: { property: "og:image:width", content: "1200" } },
  { tag: "meta", attrs: { property: "og:image:height", content: "630" } },
  { tag: "meta", attrs: { property: "og:image:alt", content: "Sign Tech Interview Logo" } },
  { tag: "meta", attrs: { property: "og:logo", content: logoUrl } },
  
  // Open Graph - Optional Time
  ...(entryData?.lastUpdated && entryData.lastUpdated instanceof Date ? 
      [{ tag: "meta", attrs: { property: "og:updated_time", content: entryData.lastUpdated.toISOString() } }] 
      : []
  ),
  
  // Open Graph - Alternate Locale (Example for Spanish)
  { tag: "meta", attrs: { property: "og:locale:alternate", content: "es" } },
  
  // Twitter Card
  { tag: "meta", attrs: { name: "twitter:card", content: "summary_large_image" } },
  { tag: "meta", attrs: { name: "twitter:site", content: "@SignLanguageTech" } },
  { tag: "meta", attrs: { name: "twitter:title", content: pageTitle } },
  { tag: "meta", attrs: { name: "twitter:description", content: pageDescription } },
  { tag: "meta", attrs: { name: "twitter:image", content: logoUrl } },
  { tag: "meta", attrs: { name: "twitter:image:alt", content: "Sign Tech Interview Logo" } },
];

// 7. Filter out duplicate tags
const existingProperties = new Set<string>();
const existingNames = new Set<string>();

originalHead.forEach((tag: MetaTag) => {
  if (tag.attrs?.property) existingProperties.add(tag.attrs.property);
  if (tag.attrs?.name) existingNames.add(tag.attrs.name);
});

const additionalHead = customHead.filter((tag: MetaTag) => {
  if (tag.attrs?.property) return !existingProperties.has(tag.attrs.property);
  if (tag.attrs?.name) return !existingNames.has(tag.attrs.name);
  return true;
});

// 8. Combine all head tags
const mergedHead = [...originalHead, ...additionalHead];
---

<HeadBase head={mergedHead} />

<!-- Add critical OG tags if missing -->
{!hasMetaTag("og:type") && <meta property="og:type" content="website" />}
{!hasMetaTag("og:locale") && <meta property="og:locale" content={starlightRoute?.locale || 'en'} />}
{!hasOgImage && <meta property="og:image" content={`${baseUrl}/logo.png`} />}
{!hasMetaTag("og:image:secure_url") && <meta property="og:image:secure_url" content={`${baseUrl}/logo.png`} />}
{!hasMetaTag("og:image:width") && <meta property="og:image:width" content="1200" />}
{!hasMetaTag("og:image:height") && <meta property="og:image:height" content="630" />}
{!hasOgLogo && <meta property="og:logo" content={`${baseUrl}/logo.png`} />}

<!-- Add Optional OG tags if missing -->
{entryData?.lastUpdated && entryData.lastUpdated instanceof Date && !hasMetaTag("og:updated_time") && (
  <meta property="og:updated_time" content={entryData.lastUpdated.toISOString()} />
)}

<!-- Add Twitter Card tags if missing -->
{!hasTwitterCard && <meta name="twitter:card" content="summary_large_image" />}
{!hasTwitterSite && <meta name="twitter:site" content="@SignLanguageTech" />}
{!hasTwitterTitle && <meta name="twitter:title" content={pageTitle} />}
{!hasTwitterDescription && <meta name="twitter:description" content={pageDescription} />}
{!hasTwitterImage && <meta name="twitter:image" content={`${baseUrl}/logo.png`} />}

<!-- Add additional OG image metadata -->
{!hasMetaTag("og:image:type") && <meta property="og:image:type" content="image/png" />}
{!hasMetaTag("og:image:alt") && <meta property="og:image:alt" content="Sign Tech Interview Logo" />}
