---
import type { TechArticle, WithContext } from "schema-dts";
import HeadBase from "@astrojs/starlight/components/Head.astro";

type MetaTagName =
  | "name"
  | "property"
  | "content"
  | "charset"
  | "http-equiv"
  | "itemprop";

type MetaTag = { [Key in MetaTagName]?: string };

const starlightRoute =  Astro.locals.starlightRoute;
const {lang: currentLocale, entry, head } = starlightRoute;
const { title, description, authors, tags, lastUpdated, template } = entry.data;

const alternateLocales = head.filter(item =>
  item.tag === 'link' &&
  item.attrs.rel === 'alternate' &&
  item.attrs.hreflang !== currentLocale
).map(link =>
  typeof link.attrs.hreflang === "string" ?
    ({
      property: "og:locale:alternate",
      content: `${link.attrs.hreflang}`,
    })
  : {}
);

const logoUrl = new URL("/open-graph.png", Astro.url).toString();

const metaTags: MetaTag[] = [
  {
    name: "type",
    content: template === "splash" ? "website" : "article",
  },
  {
    name: "title",
    content: title,
  },
  {
    name: "url",
    content: Astro.url.toString(),
  },
  ...alternateLocales,
  {
    name: "image",
    property: "og:image",
    content: logoUrl,
  },
  {
    property: "og:image:secure_url",
    content: logoUrl,
  },
  {
    property: "og:image:width",
    content: "1200",
  },
  {
    property: "og:image:height",
    content: "630",
  },
  {
    property: "og:image:type",
    content: "image/png",
  },
  {
    property: "og:image:alt",
    content: "Sign Tech Interview Logo",
  },
  {
    name: "twitter:title",
    content: title,
  },
  {
    name: "twitter:description",
    content: description,
  },
  {
    name: "twitter:url",
    content: Astro.url.toString(),
  },
  {
    name: "twitter:site",
    content: "@signlanguagete1",
  },
  {
    name: "twitter:image",
    content: logoUrl,
  },
  {
    name: "twitter:image:width",
    content: "1200",
  },
  {
    name: "twitter:image:height",
    content: "630",
  },
  {
    name: "twitter:image:alt",
    content: "Sign Tech Interview Logo",
  },
  {
    name: "section",
    property: "article:section",
    content: "Technology",
  },
];

if (tags instanceof Array) {
  tags.forEach((tag) => {
    metaTags.push({
      property: "article:tag",
      content: tag,
    });
  });
}

if (authors instanceof Array) {
  authors.forEach((author) => {
    metaTags.push({
      name:"author",
      property: "article:author",
      content: author.name,
    });
  });
}

if (lastUpdated instanceof Date) {
  metaTags.push(
    ...[
      {
        property: "og:updated_time",
        content: lastUpdated.toISOString(),
      },
      {
        name: "published_time",
        property: "article:published_time",
        content: lastUpdated.toISOString(),
      },
      {
        name: "modified_time",
        property: "article:modified_time",
        content: lastUpdated.toISOString(),
      },
    ],
  );
}

// Based of https://macarthur.me/posts/structured-data-with-starlight/
const techArticleSchema: WithContext<TechArticle> = {
    "@context": "https://schema.org",
    "@type": "TechArticle",
    headline: title,
    description: description,
    url: Astro.url.href,
    author: {
      "@type": "Organization",
      name: "Sign Language Tech",
      url: Astro.url.toString(),
      logo: {
        "@type": "ImageObject",
        url: logoUrl
      }
  },
  image: {
    "@type": "ImageObject",
    url: logoUrl
  }
};
---
---

<HeadBase />
{metaTags.map((metaTag) => <meta {...metaTag} />)}
<script
    type="application/ld+json"
    set:html={JSON.stringify(techArticleSchema)}>
</script>
