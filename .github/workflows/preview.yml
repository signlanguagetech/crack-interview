name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '23'

jobs:
  # check-changes:
  #   uses: ./.github/workflows/check-changes.yml
  #   with:
  #     event_name: pull_request

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      build_required: ${{ steps.check.outputs.build_required }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for path filtering

      - name: Check for relevant changes
        id: check
        run: |
          echo "Comparing PR changes"
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})

          echo "Changed files: $CHANGED_FILES"

          # Determine if build is required - simplified approach for reliability
          NEEDS_BUILD=false

          for file in $CHANGED_FILES; do
            # Check if file is important for build
            if [[ "$file" == src/* ]] ||
              [[ "$file" == *.config.* ]] ||
              [[ "$file" == package.json ]] ||
              [[ "$file" == pnpm-lock.yaml ]]; then
              echo "Build trigger: $file"
              NEEDS_BUILD=true
              break
            fi
          done

          if [[ "$NEEDS_BUILD" == "true" ]]; then
            echo "Build required: YES - changes detected in build-related files"
          else
            echo "Build required: NO - no changes in build-related files"
          fi

          echo "build_required=$NEEDS_BUILD" >> $GITHUB_OUTPUT

  check-secrets:
    needs: [check-changes]
    if: needs.check-changes.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    outputs:
      has_token: ${{ steps.check_token.outputs.has_token }}
    steps:
      - name: Check for SURGE_TOKEN
        id: check_token
        run: |
          if [ -n "${{ secrets.SURGE_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

  fail-if-no-token:
    needs: check-secrets
    if: needs.check-secrets.outputs.has_token == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR if no SURGE_TOKEN
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üö® SURGE_TOKEN is not set in the repository secrets or is empty.'
            })

      - name: Fail workflow
        run: |
          echo "::error::SURGE_TOKEN is not set in the repository secrets or is empty."
          echo "Please add it in your repository settings under Settings > Secrets and variables > Actions."
          echo "You can get a token by running 'npx surge token' locally."
          exit 1

  build:
    needs: [check-secrets]
    if: |
      needs.check-secrets.outputs.has_token == 'true' &&
      needs.check-changes.outputs.build_required == 'true'
    uses: ./.github/workflows/shared-build.yml

  deploy-preview:
    needs: [build]
    if: |
      needs.check-secrets.outputs.has_token == 'true' &&
      needs.check-changes.outputs.build_required == 'true' &&
      success()
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.domain.outputs.url }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Download build info (for debugging)
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: build-info

      - name: Display build info
        run: cat build-info/build-details.txt

      - name: Generate domain name
        id: domain
        env:
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          generate_domain() {
            local repo_name=$(echo "$REPO_NAME" | sed 's/.*\///')
            echo "pr-$PR_NUMBER-${repo_name}.surge.sh"
          }

          DEPLOY_DOMAIN=$(generate_domain)
          echo "deploy_domain=$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT
          echo "url=https://$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: latest
          run_install: false

      - name: Install surge
        run: pnpm install -g surge

      - name: Deploy to Surge
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: |
          surge ./dist ${{ steps.domain.outputs.deploy_domain }} --token $SURGE_TOKEN

  publish-result:
    needs: [check-changes, deploy-preview]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Update or Create PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildRequired = '${{ needs.check-changes.outputs.build_required }}' === 'true';
            const timestamp = new Date().toISOString();

            let commentBody;

            if (buildRequired) {
              const deployUrl = '${{ needs.deploy-preview.outputs.url }}';
              commentBody = `## üöÄ Live Preview Deployment

            **URL:** ${deployUrl}

            **Status:** New build deployed
            **Built with:** Node.js ${{ env.NODE_VERSION }} and pnpm
            **Last updated:** ${timestamp}`;
            } else {
              commentBody = `## üìù Documentation Update

            **Status:** No build needed (only non-source files changed)
            **Last updated:** ${timestamp}`;
            }

            // Add a unique identifier that we can search for later
            commentBody += '\n\n<!-- PR-PREVIEW-COMMENT -->';

            // Get all comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find our previous deployment comment if it exists
            const deployComment = comments.find(comment =>
              comment.body.includes('<!-- PR-PREVIEW-COMMENT -->')
            );

            if (deployComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: deployComment.id,
                body: commentBody
              });
              console.log(`Updated comment ID ${deployComment.id}`);
            } else {
              // Create new comment
              const { data: newComment } = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log(`Created new comment ID ${newComment.id}`);
            }
