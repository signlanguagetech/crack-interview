name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '23'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      build_required: ${{ steps.filter.outputs.build_required }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for path filtering

      - name: Check for relevant changes
        id: filter
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})

          # Check if any files in ./src were changed
          if echo "$CHANGED_FILES" | grep -q "^src/"; then
            NEEDS_BUILD=true
          else
            NEEDS_BUILD=false
          fi

          echo "build_required=$NEEDS_BUILD" >> $GITHUB_OUTPUT
          echo "Changed files: $CHANGED_FILES"
          echo "Build required: $NEEDS_BUILD"

  check-secrets:
    needs: [check-changes]
    if: needs.check-changes.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    outputs:
      has_token: ${{ steps.check_token.outputs.has_token }}
    steps:
      - name: Check for SURGE_TOKEN
        id: check_token
        run: |
          if [ -n "${{ secrets.SURGE_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

  fail-if-no-token:
    needs: check-secrets
    if: needs.check-secrets.outputs.has_token == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR if no SURGE_TOKEN
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üö® SURGE_TOKEN is not set in the repository secrets or is empty.'
            })

      - name: Fail workflow
        run: |
          echo "::error::SURGE_TOKEN is not set in the repository secrets or is empty."
          echo "Please add it in your repository settings under Settings > Secrets and variables > Actions."
          echo "You can get a token by running 'npx surge token' locally."
          exit 1

  build:
    needs: [check-secrets]
    if: needs.check-secrets.outputs.has_token == 'true' && needs.check-changes.outputs.build_required == 'true'
    uses: ./.github/workflows/shared-build.yml

  deploy-preview:
    needs: [build]
    if: |
      needs.check-secrets.outputs.has_token == 'true' &&
      needs.check-changes.outputs.build_required == 'true' && success()
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.domain.outputs.url }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Download build info (for debugging)
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: build-info

      - name: Display build info
        run: cat build-info/build-details.txt

      - name: Generate domain name
        id: domain
        env:
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          generate_domain() {
            local repo_name=$(echo "$REPO_NAME" | sed 's/.*\///')
            echo "pr-$PR_NUMBER-${repo_name}.surge.sh"
          }

          DEPLOY_DOMAIN=$(generate_domain)
          echo "deploy_domain=$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT
          echo "url=https://$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          node-version: ${{ env.NODE_VERSION }}

      - name: Install surge
        run: pnpm install -g surge

      - name: Deploy to Surge
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: |
          surge ./dist ${{ steps.domain.outputs.deploy_domain }} --token $SURGE_TOKEN

  publish-result:
    needs: [check-changes, deploy-preview]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Use placeholder for non-source changes
        if: needs.check-changes.outputs.build_required == 'false'
        run: |
          mkdir -p dist
          echo "<html><body><h1>Documentation Update</h1><p>This PR only contains changes to documentation or other non-source files that don't affect the deployed site.</p></body></html>" > dist/index.html

      - name: Comment PR with Result
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildRequired = '${{ needs.check-changes.outputs.build_required }}' === 'true';

            let output;

            if (buildRequired) {
              const deployUrl = '${{ needs.deploy-preview.outputs.url }}';
              output = `üöÄ Preview deployment is ready!

            URL: ${deployUrl}

            Status: New build deployed
            Built with Node.js ${process.env.NODE_VERSION} and pnpm`;
            } else {
              output = `üìù Documentation Update

            A placeholder page has been deployed for this documentation-only PR.

            No build was needed since only non-source files were changed.`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
