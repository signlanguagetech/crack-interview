name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      has_token: ${{ steps.check_token.outputs.has_token }}
    steps:
      - name: Check for SURGE_TOKEN
        id: check_token
        run: |
          if [ -n "${{ secrets.SURGE_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

  fail-if-no-token:
    needs: check-secrets
    if: needs.check-secrets.outputs.has_token == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR if no SURGE_TOKEN
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš¨ SURGE_TOKEN is not set in the repository secrets or is empty.'
            })

      - name: Fail workflow
        run: |
          echo "::error::SURGE_TOKEN is not set in the repository secrets or is empty."
          echo "Please add it in your repository settings under Settings > Secrets and variables > Actions."
          echo "You can get a token by running 'npx surge token' locally."
          exit 1

  build:
    needs: check-secrets
    if: needs.check-secrets.outputs.has_token == 'true'
    uses: ./.github/workflows/shared-build.yml

  deploy-preview:
    needs: build
    if: needs.check-secrets.outputs.has_token == 'true'
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '23'
      
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist

      - name: Generate domain name
        id: domain
        env:
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          generate_domain() {
            local repo_name=$(echo "$REPO_NAME" | sed 's/.*\///')
            echo "pr-$PR_NUMBER-${repo_name}.surge.sh"
          }

          DEPLOY_DOMAIN=$(generate_domain)
          echo "deploy_domain=$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT
          echo "url=https://$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install surge
        run: pnpm install -g surge

      - name: Deploy to Surge
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: |
          surge ./dist ${{ steps.domain.outputs.deploy_domain }} --token $SURGE_TOKEN

      - name: Comment PR with Deployment URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `ðŸš€ Preview deployment is ready!

            URL: ${{ steps.domain.outputs.url }}

            Built with Node.js ${{ env.NODE_VERSION }} and pnpm`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
