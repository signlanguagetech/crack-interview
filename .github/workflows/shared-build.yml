name: Shared Build Workflow

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
        default: '23'
      force_build:
        required: false
        type: boolean
        default: false
        description: "When set to true, will always perform a new build regardless of cache status or content changes. Useful for troubleshooting or ensuring a clean build."
    outputs:
      cache_hit:
        description: "Indicates if there was a cache hit on the build"
        value: ${{ jobs.build.outputs.cache_hit }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cache_hit: ${{ steps.build_cache.outputs.cache-hit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to improve cache detection

      # Check if content has been modified since the last build
      - name: Check for content changes
        id: check_changes
        run: |
          echo "Checking for content changes..."
          
          # Default assumption: changes exist
          CONTENT_CHANGED=true
          
          # Only check for changes if it's a push or PR event
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            if git diff --name-only HEAD^ HEAD | grep -q "^src/"; then
              echo "Content changes detected in src/ directory"
              CONTENT_CHANGED=true
            else
              echo "No content changes detected in src/ directory"
              CONTENT_CHANGED=false
            fi
          else
            echo "Event type is not push or PR, assuming content changed"
          fi
          
          # Save and display result
          echo "content_changed=$CONTENT_CHANGED" >> $GITHUB_OUTPUT
          echo "Content changed: $CONTENT_CHANGED"
          echo "Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Content changed: $CONTENT_CHANGED" >> $GITHUB_STEP_SUMMARY

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      # Caching strategy for Vite
      - name: Cache .vite
        uses: actions/cache@v4
        with:
          path: node_modules/.vite
          key: ${{ runner.os }}-vite-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('astro.config.mjs', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-vite-${{ hashFiles('pnpm-lock.yaml') }}-
            ${{ runner.os }}-vite-

      # Cache for Astro build - branch-specific version
      - name: Check build cache
        id: build_cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            .astro/
          key: astro-build-${{ github.ref_name }}-${{ hashFiles('src/**/*.{js,jsx,ts,tsx,astro,md,mdx,css,sass,scss}') }}
          restore-keys: |
            astro-build-${{ github.ref_name }}-
            astro-build-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Determine if we need to build the site
      - name: Determine if build is needed
        id: need_build
        run: |
          # Initialize variables
          FORCE_BUILD="${{ inputs.force_build }}"
          CACHE_HIT="${{ steps.build_cache.outputs.cache-hit }}"
          CONTENT_CHANGED="${{ steps.check_changes.outputs.content_changed }}"
          
          # Determine if build is needed based on three criteria:
          # 1. force_build: User explicitly requested a new build
          # 2. cache_hit: No previous build found in cache
          # 3. content_changed: Source files have been modified
          if [[ "$FORCE_BUILD" == "true" ]]; then
            echo "Building because force_build is true"
            SHOULD_BUILD=true
          elif [[ "$CACHE_HIT" != "true" ]]; then
            echo "Building because no cache was found"
            SHOULD_BUILD=true
          elif [[ "$CONTENT_CHANGED" == "true" ]]; then
            echo "Building because content has changed"
            SHOULD_BUILD=true
          else
            echo "Skipping build - using cache (no changes detected)"
            SHOULD_BUILD=false
          fi
          
          # Save result
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          
          # Detailed logging for diagnostics
          echo "Build decision:" >> $GITHUB_STEP_SUMMARY
          echo "- Force build: $FORCE_BUILD" >> $GITHUB_STEP_SUMMARY
          echo "- Cache hit: $CACHE_HIT" >> $GITHUB_STEP_SUMMARY
          echo "- Content changed: $CONTENT_CHANGED" >> $GITHUB_STEP_SUMMARY
          echo "- Will build: $SHOULD_BUILD" >> $GITHUB_STEP_SUMMARY

      # Only build if necessary
      - name: Build site
        if: steps.need_build.outputs.should_build == 'true'
        run: pnpm run build

      # Always upload the artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
          retention-days: 1
          compression-level: 9 # Maximum compression to reduce size

      # Detailed build info for debugging
      - name: Save build info
        run: |
          mkdir -p build-info
          echo "Build timestamp: $(date)" > build-info/build-details.txt
          echo "Git commit: ${{ github.sha }}" >> build-info/build-details.txt
          echo "Branch/ref: ${{ github.ref_name }}" >> build-info/build-details.txt
          echo "Cache hit: ${{ steps.build_cache.outputs.cache-hit }}" >> build-info/build-details.txt
          echo "Content changed: ${{ steps.check_changes.outputs.content_changed }}" >> build-info/build-details.txt
          echo "Force build: ${{ inputs.force_build }}" >> build-info/build-details.txt
          echo "Should build: ${{ steps.need_build.outputs.should_build }}" >> build-info/build-details.txt
          echo "Node version: ${{ inputs.node_version }}" >> build-info/build-details.txt
          echo "Event: ${{ github.event_name }}" >> build-info/build-details.txt

      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info/
          retention-days: 1
