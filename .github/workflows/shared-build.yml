name: Shared Build Workflow

on:
  workflow_call:
    outputs:
      preview_url:
        description: "URL of the preview deployment (if applicable)"
        value: ${{ jobs.build.outputs.preview_url }}
    inputs:
      deploy_to_surge:
        required: false
        type: boolean
        default: false
      pr_number:
        required: false
        type: number
        default: 0
    secrets:
      SURGE_TOKEN:
        required: false
      SURGE_LOGIN:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.set_preview_url.outputs.preview_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js with PNPM cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Cache .vite
        uses: actions/cache@v4
        with:
          path: node_modules/.vite
          key: ${{ runner.os }}-vite-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('astro.config.mjs', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-vite-${{ hashFiles('pnpm-lock.yaml') }}-
            ${{ runner.os }}-vite-

      - name: Cache Astro build output
        uses: actions/cache@v4
        with:
          path: |
            dist/
            .astro/
          key: ${{ runner.os }}-astro-build-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-astro-build-${{ hashFiles('pnpm-lock.yaml') }}-
            ${{ runner.os }}-astro-build-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build site
        run: pnpm build

      # Conditional steps for Surge deployment
      - name: Cache Surge
        if: inputs.deploy_to_surge
        uses: actions/cache@v4
        id: surge-cache
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-surge-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-surge-

      - name: Setup Surge global install directory
        if: inputs.deploy_to_surge && steps.surge-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          echo "~/.npm-global/bin" >> $GITHUB_PATH

      - name: Install Surge
        if: inputs.deploy_to_surge && steps.surge-cache.outputs.cache-hit != 'true'
        run: npm install -g surge

      - name: Add Surge to PATH
        if: inputs.deploy_to_surge && steps.surge-cache.outputs.cache-hit == 'true'
        run: echo "~/.npm-global/bin" >> $GITHUB_PATH

      - name: Deploy to Surge
        if: inputs.deploy_to_surge
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          DOMAIN="pr-${{ inputs.pr_number }}-${REPO_NAME}.surge.sh"
          surge dist $DOMAIN --token ${{ secrets.SURGE_TOKEN }}
          echo "PREVIEW_URL=https://${DOMAIN}" >> $GITHUB_ENV

      - name: Set preview URL output
        id: set_preview_url
        if: inputs.deploy_to_surge
        run: echo "preview_url=https://pr-${{ inputs.pr_number }}-$(echo $GITHUB_REPOSITORY | cut -d'/' -f2).surge.sh" >> $GITHUB_OUTPUT

      # GitHub Pages artifact preparation (only for main branch)
      - name: Setup Pages
        if: ${{ !inputs.deploy_to_surge }}
        id: pages
        uses: actions/configure-pages@v4

      - name: Upload artifact for GitHub Pages
        if: ${{ !inputs.deploy_to_surge }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
