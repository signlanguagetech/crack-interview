name: Shared Check Changes Workflow
description: "Shared workflow to check for changes"

inputs:
  event_name:
    description: "The name of the event that triggered the workflow"
    required: true
    type: string
  ref_before:
    description: "The SHA of the previous commit (for comparing changes)"
    required: false
    type: string
    default: ""
  ref_after:
    description: "The SHA of the current commit (for comparing changes)"
    required: false
    type: string
    default: ""
  outputs:
    build_required:
      description: "Whether a build is required based on the changes detected"
      value: ${{ jobs.check.outputs.build_required }}

runs:
  using: "composite"
  outputs:
    build_required: ${{ steps.filter.outputs.build_required }}
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for path filtering

    - name: Check for relevant changes
      id: filter
      run: |
        # Get changed files based on event type
        if [[ "${{ inputs.event_name }}" == "push" ]]; then
          # For push events, compare the last two commits
          if [[ -n "${{ inputs.ref_before }}" && -n "${{ inputs.ref_after }}" ]]; then
            echo "Using provided refs for comparison"
            CHANGED_FILES=$(git diff --name-only ${{ inputs.ref_before }} ${{ inputs.ref_after }})
          else
            echo "Using HEAD^ and HEAD for comparison"
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          fi
        elif [[ "${{ inputs.event_name }}" == "pull_request" ]]; then
          # For PR events, get files changed in the PR
          if [[ -n "${{ inputs.ref_before }}" && -n "${{ inputs.ref_after }}" ]]; then
            echo "Using provided refs for comparison"
            CHANGED_FILES=$(git diff --name-only ${{ inputs.ref_before }} ${{ inputs.ref_after }})
          else
            echo "Using default PR comparison"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          fi
        else
          # For manual runs or other events, check if src directory has files
          echo "No specific event comparison, checking if src directory exists"
          CHANGED_FILES=$(find src -type f 2>/dev/null | tr '\n' ' ')
        fi

        echo "Changed files: $CHANGED_FILES"

        # Determine if build is required
        if echo "$CHANGED_FILES" | grep -q "^src/"; then
          NEEDS_BUILD=true
          echo "Build required: YES - changes detected in src/"
        else
          NEEDS_BUILD=false
          echo "Build required: NO - no changes in src/"
        fi

        echo "build_required=$NEEDS_BUILD" >> $GITHUB_OUTPUT
